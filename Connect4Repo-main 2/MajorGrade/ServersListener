import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Arrays;

public class ServersListener implements Runnable {
    private ObjectInputStream inputStream;
    private ObjectOutputStream outputStream;
    private char player;
    private static char turn = 'X';
    private static GameData gameData = new GameData();
    private static ArrayList<ObjectOutputStream> outputStreams = new ArrayList<>();

    public ServersListener(ObjectInputStream inputStream, ObjectOutputStream outputStream, char player) {
        this.inputStream = inputStream;
        this.outputStream = outputStream;
        this.player = player;
        outputStreams.add(outputStream);
    }

    public void run() {
        try {
            while (true) {
                CommandFromClient commandFromClient = (CommandFromClient) inputStream.readObject();
                if (commandFromClient.getCommand() == CommandFromClient.CLOSING) {
                    sendCommand(new CommandFromServer(CommandFromServer.CLOSING, null));
                }
                if (commandFromClient.getCommand() == CommandFromClient.CONFIRM) {
                    sendCommand(new CommandFromServer(CommandFromServer.CONFIRMRESET, null));
                }
                if (commandFromClient.getCommand() == CommandFromClient.RESTART) {
                    gameData.reset();
                    resetTurn();
                }
                if (commandFromClient.getCommand() == CommandFromClient.MOVE &&
                        turn == player && !gameData.isWinner('X') &&
                        !gameData.isWinner('O') && !gameData.isCat()) {
                    String data = commandFromClient.getData();
                    int c = data.charAt(0) - '0';
                    int r = data.charAt(1) - '0';
                    if (gameData.getGrid()[r][c] != ' ')
                        continue;
                    gameData.getGrid()[r][c] = player;
                    sendCommand(new CommandFromServer(CommandFromServer.MOVE, data));
                    changeTurn();
                    checkGameOver();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void changeTurn() {
        if (turn == 'X')
            turn = 'O';
        else
            turn = 'X';
        if (turn == 'X')
            sendCommand(new CommandFromServer(CommandFromServer.X_TURN, null));
        else
            sendCommand(new CommandFromServer(CommandFromServer.O_TURN, null));
    }

    public void resetTurn() {
        turn = 'X';
        sendCommand(new CommandFromServer(CommandFromServer.RESET, null));
    }

    public void checkGameOver() {
        int command = -1;
        if (gameData.isCat())
            command = CommandFromServer.TIE;
        else if (gameData.isWinner('X'))
            command = CommandFromServer.X_WINS;
        else if (gameData.isWinner('O'))
            command = CommandFromServer.O_WINS;
        if (command != -1)
            sendCommand(new CommandFromServer(command, null));
    }

    public void sendCommand(CommandFromServer commandFromServer) {
        for (ObjectOutputStream outputStream : outputStreams) {
            try {
                outputStream.writeObject(commandFromServer);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}
